Queueable: - It is an Apex interface used to run jobs asynchronously in the background. It lets you process records outside
              the main transaction and supports passing complex data, chaining jobs, and tracking their status.

  Syntax:- public class MyQueueableClass implements Queueable {

                // Constructor to pass data to the class (optional)
                public MyQueueableClass(List<Account> accountsToProcess) {
                    // Store the data for the execute method
                }

                // The execute method contains the logic to run asynchronously
                public void execute(QueueableContext context) {
                    // Your logic to process the data (e.g., update records)
                    for (Account acc : accountsToProcess) {
                        acc.Name = acc.Name + ' - Processed';
                    }
                    update accountsToProcess;
                }
            }
      calling process of queueable class:- 
                                        // Prepare data (query some accounts)
                                        List<Account> accList = [SELECT Id, Name FROM Account LIMIT 5];
                                        // Enqueue the job
                                        System.enqueueJob(new MyQueueableClass(accList));


      Why we use queueable apex: - 
                              => Async processing: Run logic that takes too long for a normal transaction.
                                
                              => Chaining jobs: Unlike Future methods, you can chain Queueables, meaning one job can enqueue another.
                                
                              => Complex objects: Can pass SObjects and complex types (Future methods can only pass primitives).
                                
                              => Error handling: Works with Finalizer interface to handle cleanup or retries.

    How Queueable Apex work: - 
                                You implement the Queueable interface.
                                Override the execute(QueueableContext qc) method.
                                Submit the job using System.enqueueJob(new MyQueueable()).
                                Salesforce executes it asynchronously when resources are available.
                                Optionally, implement Finalizer to run cleanup logic after the job finishes, even if it fails.
