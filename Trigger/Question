1. Write a trigger to stop a user from deleting an Account if it has related Contacts.
           Trigger:-  trigger RestrictContactDeleteion on Account (Before delete) {
                      if(Trigger.isDelete && Trigger.isBefore) {
                          TriggerPractionerCommonHandler.restrictContactDeletion(Trigger.oldMap);
                      }
                  }
             Handler: -  public class TriggerPractionerCommonHandler {
                          public static void restrictContactDeletion(Map<Id,Account> accMap) {
                              Set<Id> accId = new Set<Id>();
                              List<Contact> accList = [SELECT Accountid FROM Contact WHERE Accountid in : accMap.keySet()];
                              for(Contact ac : accList) {
                                 accId.add(ac.accountid);
                              }
                              for(Account acc: accMap.values()) {
                                  if(accId.contains(acc.Id)) {
                                      acc.addError('Account has a contact, can not be deleted.');
                                  }
                              }    
                          }
                      }
*************************************************************************************************************************************
Rollup summary achievement Account contact through contact:- 
Trigger:-  trigger ParentAchiever on Contact (After insert, After update, After delete, After undelete) {
               if(Trigger.isAfter && (Trigger.isUpdate || Trigger.isInsert || Trigger.isUndelete || Trigger.isDelete)) {
                  ParentAchiever.achieveParents(Trigger.isDelete ? Trigger.old : Trigger.New); 
               }  
           }

Handler: - public class ParentAchiever {
    public static void achieveParents(List<Contact> contactList) {
        Set<Id> accId = new Set<Id>();
        List<Account> accList = new List<Account>();
        for(Contact con : contactList) {
            if(con.accountId != null){
                accId.add(con.accountid);
            }
        }
        if(accId.isEmpty()) {
            return;
        }
        List<AggregateResult> agg = [SELECT SUM(Salary__c) totalSal ,AccountId  FROM Contact WHERE AccountId in : accId GROUP BY AccountId];
        for(AggregateResult ag : agg) {
            Account acc = new Account();
            acc.Id = (Id)ag.get('AccountId');
            acc.Sum_of_salary__c = (Decimal)ag.get('totalSal');
            accList.add(acc);
        }
        if(!accList.isEmpty()) {
            update accList;
        }     
    }
}
******************************************************************************************************************************
